import { ContactsCollection } from '../db/models/contacts.js';

// –î–æ–ø–æ–º—ñ–∂–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–æ–±—É–¥–æ–≤–∏ —Ñ—ñ–ª—å—Ç—Ä–∞
const getFilter = (userId, filter) => {
    // ‚úÖ –§–Ü–ö–°: –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ 'userId' –¥–ª—è –ø–æ—à—É–∫—É (–≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î –º–æ–¥–µ–ª—ñ)
    const contactFilter = { userId: userId }; 
    
    if (filter) {
        if (filter.contactType) {
            contactFilter.contactType = filter.contactType;
        }
        if (filter.isFavorite !== undefined) { 
            contactFilter.isFavorite = filter.isFavorite;
        }
    }
    return contactFilter;
};

export const getAllContacts = async (userId, { page = 1, perPage = 10, sortOrder = 'asc', sortBy = 'name', filter = {} }) => {
  const contactFilter = getFilter(userId, filter);

  const skip = (page - 1) * perPage;
  
  const contacts = await ContactsCollection.find(contactFilter)
    .skip(skip)
    .limit(perPage)
    .sort({ [sortBy]: sortOrder === 'asc' ? 1 : -1 }); 
    
  return contacts;
};

export const countAllContacts = async (userId, filter = {}) => {
  const contactFilter = getFilter(userId, filter);
  return await ContactsCollection.countDocuments(contactFilter);
};

export const createContact = async (userId, payload) => { 
  const newContact = await ContactsCollection.create({
    ...payload,
    // üî• –§–Ü–ù–ê–õ–¨–ù–ï –í–ò–ü–†–ê–í–õ–ï–ù–ù–Ø: –ü–æ–ª–µ –¥–ª—è Mongoose –º–∞—î –±—É—Ç–∏ 'userId'
    userId: userId, 
  });
  return newContact;
};


export const getContactById = async (contactId, userId) => {
    // –®—É–∫–∞—î–º–æ –∑–∞ _id —Ç–∞ userId
    return ContactsCollection.findOne({ _id: contactId, userId: userId });
};

export const updateContact = async (contactId, userId, payload) => {
    return ContactsCollection.findOneAndUpdate(
        // –®—É–∫–∞—î–º–æ –∑–∞ _id —Ç–∞ userId
        { _id: contactId, userId: userId },
        payload,
        { new: true },
    );
};

export const deleteContact = async (contactId, userId) => {
    // –®—É–∫–∞—î–º–æ –∑–∞ _id —Ç–∞ userId
    return ContactsCollection.findOneAndDelete({ _id: contactId, userId: userId });
};